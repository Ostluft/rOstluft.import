[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Autor:innen","title":"Autor:innen und Zitierung","text":"Thomas von Allmen. Autor:, Maintainer:. Ostluft. Urheberrechtsinhaber:.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Autor:innen und Zitierung","text":"von Allmen T (2022). rOstluft.import: Importing data rOstluft store. R package version 0.1.0.","code":"@Manual{,   title = {rOstluft.import: Importing data into a rOstluft store},   author = {Thomas {von Allmen}},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"rostluftimport","dir":"","previous_headings":"","what":"Importing data into a rOstluft store","title":"Importing data into a rOstluft store","text":"Das Ziel von rOstluft.import ist es einene einfachen und einheitlichen Prozess für den regelmässigen Import von Daten einen rOstluft Store zu definieren.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Importing data into a rOstluft store","text":"Die aktuelle Version kann von github installiert werden.","code":"remotes::install_github(\"Ostluft/rOstluft.import\")"},{"path":"/index.html","id":"voraussetzungen","dir":"","previous_headings":"","what":"Voraussetzungen","title":"Importing data into a rOstluft store","text":"Damit der Import erfolgreich ausgeführt werden kann müssen folgende Voraussetzungen erfüllt sein: Die Daten sind aufgeteilt Tages-/Monatsdateien (fixes Interval) Lesefunktion mit Rückgabe der Daten im rolf Format Meta Dataframe im lokalen rOstluft rds Store","code":""},{"path":"/index.html","id":"beispiel","dir":"","previous_headings":"","what":"Beispiel","title":"Importing data into a rOstluft store","text":"","code":"library(rOstluft.import) # packages uses a lgr Logger lg <- lgr::get_logger(\"rOstluft.import\") lg$set_threshold(\"info\")  config_file <- system.file(\"extdata\", \"config_mythenquai.yml\", package = \"rOstluft.import\") config <- yaml::read_yaml(config_file) import(config) #> INFO  [23:08:54.217] Starte import  #> INFO  [23:08:54.981] Download fehlende Dateien für den Zeitraum von 2022-03-13 bis 2022-03-19: https://tecdottir.herokuapp.com/measurements/mythenquai?startDate=2022-03-17&endDate=2022-03-18, https://tecdottir.herokuapp.com/measurements/mythenquai?startDate=2022-03-18&endDate=2022-03-19  #> INFO  [23:08:56.070] Lese Datei: tmp/cache/seepolizei/mythenquai_2022-03-18.json  #> INFO  [23:08:56.449] Schreibe importierte Daten in Datei: tmp/imported/seepolizei/2022/mythenquai_2022-03-18.rds  #> INFO  [23:08:56.454] Lösche Cache Datei: tmp/cache/seepolizei/mythenquai_2022-03-18.json  #> INFO  [23:08:56.458] Lese Datei: tmp/cache/seepolizei/mythenquai_2022-03-19.json  #> INFO  [23:08:56.606] Schreibe importierte Daten in Datei: tmp/imported/seepolizei/2022/mythenquai_2022-03-19.rds  #> INFO  [23:08:56.611] Lösche Cache Datei: tmp/cache/seepolizei/mythenquai_2022-03-19.json  #> INFO  [23:08:56.614] Import beendet # Konfiguration Zeitraum: # to = lubridate::floor_date(lubridate::now(tz), floor_now) - lubridate::period(to_offset) # from = to - lubridate::period(period) # dates = seq(from, to, by = interval) tz: \"GMT\" floor_now: \"day\" to_offset: \"1 day\" period: \"6 days\" interval: \"1 day\"  # Konfiguration Quelle und Ablage source_typ: \"curl\"     # curl, copy input_fn_tpl: \"https://tecdottir.herokuapp.com/measurements/mythenquai?startDate={format(date - 1, '%Y-%m-%d')}&endDate=%Y-%m-%d\" cache_fn_tpl: \"cache/seepolizei/mythenquai_%Y-%m-%d.json\" imported_fn_tpl: \"imported/seepolizei/%Y/mythenquai_%Y-%m-%d.rds\"  # verwendeter lokaler rOstluft Store store_name: \"rOstluft.import\"  # Das Paket (Namespace), welches die Lesefunktion enthält muss aus R spezifischen # Gründen separat angeben werden. Verwende NULL we reading_function_ns: \"rOstluft\" reading_function: \"read_seepolizei_json\"  # Allgemeines Verhalten missing_files: \"warn\" delete_cache: TRUE  # Curl Optionen. Mehr Infos unter folgenden Links: # - https://jeroen.cran.dev/curl/reference/curl_options.html # - https://curl.se/libcurl/c/curl_easy_setopt.html # Beispiel für nltm Proxy + basic http auth #curl_opts: #  proxy: \"proxy.server.loc:8080\" #  proxyauth: 8 #  proxyuserpwd: \":\" #  ssl_verifypeer: 0 #  httpauth: 1          #  userpwd: \"user:password\"  # Zusätzliche HTTP Headers wenn curl verwendet wird. Beispielsweise ein JWT # Token zur Authorisation #curl_headers: #  Authorization: \"Bearer XXXXXXXXXXXXXXXXXX\"  # Konfiguration der Normalisierung mit rOstluft::meta_apply # Für jeden Eintrag unter Meta wird meta_apply einmal aufgerufen meta_key: seepolizei meta:   -     data_src: site     data_dest: site     meta_key: site_short     meta_val: site   -     data_src: parameter     data_dest: unit     meta_key: parameter_original     meta_val: unit   -     data_src: parameter     data_dest: parameter     meta_key: parameter_original     meta_val: parameter"},{"path":"/reference/apply_tpl_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper um glue:glue and format — apply_tpl_to_date","title":"wrapper um glue:glue and format — apply_tpl_to_date","text":"Dadurch das es ein Wrapper um glue::glue() und base::format() ist, kann man zum einem das Datum einfach mit den üblichen Formatierungskürzel wie \"%Y\" formatieren oder Ausdrücke einfügen.","code":""},{"path":"/reference/apply_tpl_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper um glue:glue and format — apply_tpl_to_date","text":"","code":"apply_tpl_to_date(date, tpl, ...)"},{"path":"/reference/apply_tpl_to_date.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"wrapper um glue:glue and format — apply_tpl_to_date","text":"date von der generierten Sequenz (POSIXct oder Date) tpl Template String aus der config ... Möglichkeit weitere Parameter für glue::glue() einzufügen","code":""},{"path":"/reference/apply_tpl_to_date.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"Rückgabewert","title":"wrapper um glue:glue and format — apply_tpl_to_date","text":"formatierter String","code":""},{"path":"/reference/apply_tpl_to_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Beispiele","title":"wrapper um glue:glue and format — apply_tpl_to_date","text":"","code":"to <- lubridate::floor_date(lubridate::now(\"GMT\"), \"day\") from <- to - lubridate::period(\"6 days\") dates <- seq(from, to, by = \"1 day\")  tpl <- \"[..]/mythenquai?startDate={format(date - 1, '%Y-%m-%d')}&endDate=%Y-%m-%d\"  apply_tpl_to_date(dates, tpl) #> [1] \"[..]/mythenquai?startDate=2022-03-13&endDate=2022-03-14\" #> [2] \"[..]/mythenquai?startDate=2022-03-14&endDate=2022-03-15\" #> [3] \"[..]/mythenquai?startDate=2022-03-15&endDate=2022-03-16\" #> [4] \"[..]/mythenquai?startDate=2022-03-16&endDate=2022-03-17\" #> [5] \"[..]/mythenquai?startDate=2022-03-17&endDate=2022-03-18\" #> [6] \"[..]/mythenquai?startDate=2022-03-18&endDate=2022-03-19\" #> [7] \"[..]/mythenquai?startDate=2022-03-19&endDate=2022-03-20\""},{"path":"/reference/copy_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Kopieren der Inputdateien mit fs::copy() — copy_files","title":"Kopieren der Inputdateien mit fs::copy() — copy_files","text":"Filtert den Dataframe basieren auf den bereits vorhanden Dateien im Cache und importierten","code":""},{"path":"/reference/copy_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kopieren der Inputdateien mit fs::copy() — copy_files","text":"","code":"copy_files(df, config, ...)"},{"path":"/reference/copy_files.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Kopieren der Inputdateien mit fs::copy() — copy_files","text":"df Dataframe mit Liste der Dateien config Konfiguration für gesamten import ... aktuell nicht gebraucht, eventuell Zukunft zur Überschreibung von config Werten","code":""},{"path":"/reference/copy_files.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"Rückgabewert","title":"Kopieren der Inputdateien mit fs::copy() — copy_files","text":"invisible(NULL)","code":""},{"path":"/reference/create_date_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Zeitpunkte für die Dateinamen generieren — create_date_sequence","title":"Zeitpunkte für die Dateinamen generieren — create_date_sequence","text":"Generiert eine Sequence von Zeitpunkt aus der config","code":""},{"path":"/reference/create_date_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zeitpunkte für die Dateinamen generieren — create_date_sequence","text":"","code":"create_date_sequence(config)"},{"path":"/reference/create_date_sequence.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Zeitpunkte für die Dateinamen generieren — create_date_sequence","text":"config Konfiguration für gesamten import","code":""},{"path":"/reference/create_date_sequence.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"Rückgabewert","title":"Zeitpunkte für die Dateinamen generieren — create_date_sequence","text":"Vector von Date oder POSIXct","code":""},{"path":"/reference/create_date_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Beispiele","title":"Zeitpunkte für die Dateinamen generieren — create_date_sequence","text":"","code":"config_file <- system.file(\"extdata\", \"config_mythenquai.yml\", package = \"rOstluft.import\") config <- yaml::read_yaml(config_file)  create_date_sequence(config) #> [1] \"2022-03-13 GMT\" \"2022-03-14 GMT\" \"2022-03-15 GMT\" \"2022-03-16 GMT\" #> [5] \"2022-03-17 GMT\" \"2022-03-18 GMT\" \"2022-03-19 GMT\""},{"path":"/reference/create_plan_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Erzeuge Dataframe aller Dateien — create_plan_df","title":"Erzeuge Dataframe aller Dateien — create_plan_df","text":"Erzeugt einen Dataframe mit einer Zeile für jedes Datum/Zeitpunkt. Folgende Angaben ist jeder Zeile:","code":""},{"path":"/reference/create_plan_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Erzeuge Dataframe aller Dateien — create_plan_df","text":"","code":"create_plan_df(dates, config)"},{"path":"/reference/create_plan_df.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Erzeuge Dataframe aller Dateien — create_plan_df","text":"dates Sequence von Date/POSIXct config Konfiguration für gesamten import","code":""},{"path":"/reference/create_plan_df.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"Rückgabewert","title":"Erzeuge Dataframe aller Dateien — create_plan_df","text":"tibble mit allen notwendigen Angaben für den Import","code":""},{"path":"/reference/create_plan_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Erzeuge Dataframe aller Dateien — create_plan_df","text":"input_fn: Input Dateiname/URL zum kopieren/herunterladen cache_fn: Cache Dateiname der Rohdaten imported_fn: Import Dateiname für die normalisierten und importierten Daten cache_fn_exists: exisitiert die Cache Datei bereits? imported_fn_exists: exisitiert die Import Datei bereits?","code":""},{"path":"/reference/create_plan_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Beispiele","title":"Erzeuge Dataframe aller Dateien — create_plan_df","text":"","code":"config_file <- system.file(\"extdata\", \"config_mythenquai.yml\", package = \"rOstluft.import\") config <- yaml::read_yaml(config_file)  dates <- create_date_sequence(config) plan <- create_plan_df(dates, config)  tibble::glimpse(plan) #> Rows: 7 #> Columns: 6 #> $ date               <dttm> 2022-03-13, 2022-03-14, 2022-03-15, 2022-03-16, 20~ #> $ input_fn           <chr> \"https://tecdottir.herokuapp.com/measurements/mythe~ #> $ cache_fn           <chr> \"tmp/cache/seepolizei/mythenquai_2022-03-13.json\", ~ #> $ imported_fn        <chr> \"tmp/imported/seepolizei/2022/mythenquai_2022-03-13~ #> $ cache_fn_exists    <lgl> FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE #> $ imported_fn_exists <lgl> TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE"},{"path":"/reference/download_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Herunterladen der Inputdateien mit curl::curl_download() — download_files","title":"Herunterladen der Inputdateien mit curl::curl_download() — download_files","text":"Filtert den Dataframe basieren auf den bereits vorhanden Dateien im Cache und importierten","code":""},{"path":"/reference/download_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Herunterladen der Inputdateien mit curl::curl_download() — download_files","text":"","code":"download_files(df, config, ...)"},{"path":"/reference/download_files.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Herunterladen der Inputdateien mit curl::curl_download() — download_files","text":"df Dataframe mit Liste der Dateien config Konfiguration für gesamten import ... aktuell nicht gebraucht, eventuell Zukunft zur Überschreibung von config Werten","code":""},{"path":"/reference/download_files.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"Rückgabewert","title":"Herunterladen der Inputdateien mit curl::curl_download() — download_files","text":"invisible(NULL)","code":""},{"path":"/reference/get_store.html","id":null,"dir":"Reference","previous_headings":"","what":"Erzeugt lokalen rolf rds store — get_store","title":"Erzeugt lokalen rolf rds store — get_store","text":"Erzeugt lokalen rolf rds store","code":""},{"path":"/reference/get_store.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Erzeugt lokalen rolf rds store — get_store","text":"","code":"get_store(config)"},{"path":"/reference/get_store.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Erzeugt lokalen rolf rds store — get_store","text":"config Konfiguration für gesamten import","code":""},{"path":"/reference/get_store.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"Rückgabewert","title":"Erzeugt lokalen rolf rds store — get_store","text":"schreibbarer lokaler rOstluft","code":""},{"path":"/reference/get_store.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Beispiele","title":"Erzeugt lokalen rolf rds store — get_store","text":"","code":"config_file <- system.file(\"extdata\", \"config_mythenquai.yml\", package = \"rOstluft.import\") config <- yaml::read_yaml(config_file)  get_store(config) #> <storage_local> #>   Public: #>     clone: function (deep = FALSE)  #>     columns_path: C:/Users/tom/AppData/Local/rOstluft/rOstluft.import/colu ... #>     content_path: C:/Users/tom/AppData/Local/rOstluft/rOstluft.import/cont ... #>     data_path: C:/Users/tom/AppData/Local/rOstluft/rOstluft.import/data #>     destroy: function (confirmation = \"NO\")  #>     ext: rds #>     fix_content: function ()  #>     format: format_rolf, R6 #>     get: function (filter = NULL, ...)  #>     get_chunk_path: function (chunk_name)  #>     get_columns: function ()  #>     get_content: function ()  #>     get_meta: function (key = NULL)  #>     initialize: function (name, format, path = NULL, read.only = TRUE, ext = \"rds\",  #>     list_chunks: function ()  #>     meta_path: C:/Users/tom/AppData/Local/rOstluft/rOstluft.import/meta #>     name: rOstluft.import #>     path: C:\\Users\\tom\\AppData\\Local/rOstluft/rOstluft.import #>     put: function (data)  #>     put_meta: function (...)  #>     read.only: FALSE #>     read_function: function (file, refhook = NULL)  #>     write_function: function (object, file = \"\", ascii = FALSE, version = NULL, compress = TRUE,  #>   Private: #>     check_columns: function (data)  #>     columns: NULL #>     merge_chunk: function (data)  #>     merge_content: function (new_content, chunk_vars)  #>     read_chunk: function (chunk_path, filter)"},{"path":"/reference/import.html","id":null,"dir":"Reference","previous_headings":"","what":"Importiert Daten — import","title":"Importiert Daten — import","text":"Diese Funktionen importiert Daten gemäss einer Konfiguration einen lokalen rolf rds store. Damit der Import durchgeführt werden kann, müssen folgende Anforderungen erfüllt sein:","code":""},{"path":"/reference/import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Importiert Daten — import","text":"","code":"import(config)"},{"path":"/reference/import.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Importiert Daten — import","text":"config Liste mit sämtlichen Konfigurationsoptionen","code":""},{"path":"/reference/import.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"Rückgabewert","title":"Importiert Daten — import","text":"invisible(NULL)","code":""},{"path":"/reference/import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Importiert Daten — import","text":"Eine Lesefunktion für die Daten muss entweder als Funktion einem Package oder im globalen Enviroment existieren Der Store enthält die notwendigen Metadaten Aktuell werden als Quelle curl Downloads (ftp, http) und das Dateisystem unterstütz.","code":""},{"path":"/reference/import.html","id":"config","dir":"Reference","previous_headings":"","what":"config","title":"Importiert Daten — import","text":"Die Konfiguration wird einfachsten einer externen yaml Datei gespeichert. Eine Beschreibung der verschiedenen Optionen ist der Beispieldatei config_mythenquai.yml enthalten.","code":""},{"path":"/reference/import.html","id":"logging","dir":"Reference","previous_headings":"","what":"logging","title":"Importiert Daten — import","text":"Das Packaging nutzt einen lgr::lgr Package Level Logger mit dem Namen \"rOstluft.import\". Mehr Infos der lgr Vignette","code":""},{"path":"/reference/import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Beispiele","title":"Importiert Daten — import","text":"","code":"lg <- lgr::get_logger(\"rOstluft.import\") lg$set_threshold(\"trace\")  config_file <- system.file(\"extdata\", \"config_mythenquai.yml\", package = \"rOstluft.import\") config <- yaml::read_yaml(config_file) import(config) #> INFO  [23:14:35.026] Starte import  #> INFO  [23:14:35.073] Kein Download notwendig. Alle Dateien bereits gecached oder importiert.  #> INFO  [23:14:35.085] Lese Datei: tmp/cache/seepolizei/mythenquai_2022-03-16.json  #> DEBUG [23:14:35.296] Wende Metainformationen an  #> TRACE [23:14:35.300] data$site = meta[meta$site_short == data$site]$site  #> TRACE [23:14:35.307] data$unit = meta[meta$parameter_original == data$parameter]$unit  #> TRACE [23:14:35.313] data$parameter = meta[meta$parameter_original == data$parameter]$parameter  #> INFO  [23:14:35.434] Schreibe importierte Daten in Datei: tmp/imported/seepolizei/2022/mythenquai_2022-03-16.rds  #> INFO  [23:14:35.440] Lösche Cache Datei: tmp/cache/seepolizei/mythenquai_2022-03-16.json  #> INFO  [23:14:35.443] Lese Datei: tmp/cache/seepolizei/mythenquai_2022-03-17.json  #> DEBUG [23:14:35.504] Wende Metainformationen an  #> TRACE [23:14:35.506] data$site = meta[meta$site_short == data$site]$site  #> TRACE [23:14:35.513] data$unit = meta[meta$parameter_original == data$parameter]$unit  #> TRACE [23:14:35.520] data$parameter = meta[meta$parameter_original == data$parameter]$parameter  #> INFO  [23:14:35.597] Schreibe importierte Daten in Datei: tmp/imported/seepolizei/2022/mythenquai_2022-03-17.rds  #> INFO  [23:14:35.603] Lösche Cache Datei: tmp/cache/seepolizei/mythenquai_2022-03-17.json  #> INFO  [23:14:35.607] Lese Datei: tmp/cache/seepolizei/mythenquai_2022-03-18.json  #> DEBUG [23:14:35.670] Wende Metainformationen an  #> TRACE [23:14:35.673] data$site = meta[meta$site_short == data$site]$site  #> TRACE [23:14:35.679] data$unit = meta[meta$parameter_original == data$parameter]$unit  #> TRACE [23:14:35.686] data$parameter = meta[meta$parameter_original == data$parameter]$parameter  #> INFO  [23:14:35.764] Schreibe importierte Daten in Datei: tmp/imported/seepolizei/2022/mythenquai_2022-03-18.rds  #> INFO  [23:14:35.770] Lösche Cache Datei: tmp/cache/seepolizei/mythenquai_2022-03-18.json  #> INFO  [23:14:35.774] Lese Datei: tmp/cache/seepolizei/mythenquai_2022-03-19.json  #> DEBUG [23:14:35.833] Wende Metainformationen an  #> TRACE [23:14:35.835] data$site = meta[meta$site_short == data$site]$site  #> TRACE [23:14:35.841] data$unit = meta[meta$parameter_original == data$parameter]$unit  #> TRACE [23:14:35.847] data$parameter = meta[meta$parameter_original == data$parameter]$parameter  #> INFO  [23:14:35.925] Schreibe importierte Daten in Datei: tmp/imported/seepolizei/2022/mythenquai_2022-03-19.rds  #> INFO  [23:14:35.933] Lösche Cache Datei: tmp/cache/seepolizei/mythenquai_2022-03-19.json  #> INFO  [23:14:35.937] Import beendet"},{"path":"/reference/import_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Dateien im Plan Dataframe — import_files","title":"Import Dateien im Plan Dataframe — import_files","text":"Filtert den Dataframe basieren auf den bereits vorhanden Dateien im Cache und importierten","code":""},{"path":"/reference/import_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Dateien im Plan Dataframe — import_files","text":"","code":"import_files(df, config, ...)"},{"path":"/reference/import_files.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Import Dateien im Plan Dataframe — import_files","text":"df Dataframe mit Liste der Dateien config Konfiguration für gesamten import ... aktuell nicht gebraucht, eventuell Zukunft zur Überschreibung von config Werten","code":""},{"path":"/reference/import_files.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"Rückgabewert","title":"Import Dateien im Plan Dataframe — import_files","text":"invisible(NULL)","code":""},{"path":"/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way. enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions). simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[. Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround. Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually : Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"}]
